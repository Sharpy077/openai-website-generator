services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://frontend:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: ${FRONTEND_CPU_LIMIT:-1.00}
          memory: ${FRONTEND_MEM_LIMIT:-1024M}
        reservations:
          cpus: ${FRONTEND_CPU_RESERVATION:-0.50}
          memory: ${FRONTEND_MEM_RESERVATION:-512M}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-5}

  db:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-5}

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${SSL_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - app_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      frontend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-5}
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - DOMAIN_NAME=${DOMAIN_NAME}

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    env_file:
      - .env
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - app_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet --agree-tos; sleep 12h & wait $${!}; done'"
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-5}

volumes:
  postgres_data:


networks:
  app_network:
    driver: bridge
